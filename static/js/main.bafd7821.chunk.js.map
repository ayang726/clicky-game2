{"version":3,"sources":["components/Card/Card.jsx","components/Column/Column.jsx","components/Row/Row.jsx","components/Body/Body.jsx","components/Jumbotron/Jumbotron.jsx","components/Navbar/Navbar.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["props","imgSrc","cardName","className","onClick","cardClick","src","alt","name","cardNames","map","index","Column","key","cardNameArray","push","length","propsValue","Row","Navbar","id","message","score","topScore","App","state","selected","e","console","log","target","includes","setState","incrementScore","storeSelected","sort","Math","random","newArray","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bafd7821.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Card.css\"\n\nexport default function (props) {\n\n    const imgSrc = `./assets/images/${props.cardName}.png`\n    return (\n        <div className=\"card\" onClick={props.cardClick} >\n            <img className=\"card-content\" src={imgSrc} alt=\"...\" name={props.cardName} />\n        </div>\n    )\n}","import React from \"react\"\nimport Card from \"../Card/Card\"\n\nexport default function (props) {\n    return (\n        <div className=\"col-lg-3 col-md-4 col-sm-6\">\n            <Card cardName={props.cardName} cardClick={props.cardClick} />\n        </div>\n    )\n}","import React from \"react\"\nimport Column from \"../Column/Column\"\n\nexport default function (props) {\n\n    return (\n        <div className=\"row my-4\">\n            {\n                props.cardNames.map((cardName, index) => {\n                    return <Column cardName={cardName} cardClick={props.cardClick} key={index} />\n                })\n            }\n        </div>\n    )\n}","import React from \"react\"\nimport \"./Body.css\"\nimport Row from \"../Row/Row\"\n\nexport default function (props) {\n    let cardNames = [];\n    return (\n        <div className=\"container my-4 mx-auto\">\n            {props.cardNameArray.map((cardName, index) => {\n                cardNames.push(cardName)\n\n                if ((index + 1) % 4 === 0 || (index + 1) === props.cardNameArray.length) {\n                    const propsValue = cardNames;\n                    cardNames = [];\n                    return <Row cardNames={propsValue} key={index} cardClick={props.cardClick} />\n                }\n                else return null;\n\n            })}\n        </div>\n    );\n}","import React from \"react\";\nimport \"./Jumbotron.css\"\n\nexport default function (props) {\n    return (\n        <div className=\"text-center jumbotron\">\n            <h1 className=\"m-4 display-2\"><strong>Clicky Game!</strong></h1>\n            <h4><strong>Click on an image to earn points, but don't click on any more than once!</strong></h4>\n        </div>\n    )\n}","import React from \"react\"\nimport \"./Navbar.css\"\n\nfunction Navbar(props) {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light\">\n                <div className=\"d-flex flex-row mx-auto\">\n                    <ul>\n                        <li className=\"brand\">\n                            <strong>Clicky Game</strong>\n                        </li>\n                        <li className=\"message\" id=\"message\">\n                            {props.message || \"Click an image to begin!\"}\n                        </li>\n                        <li className=\"score\">\n                            Score: {props.score || 0} | Top Score: {props.topScore || 0}\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from \"react\"\nimport \"./Footer.css\"\n\nexport default function () {\n    return (\n        <div>\n            <div className=\"footer-light\"></div>\n            <div className=\"footer-dark\">\n                <strong>Clicky Game! React</strong>\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Body, Jumbotron, Navbar, Footer } from \"./components\"\n// import Navbar from \"./components/Navbar\"\n\nclass App extends Component {\n  state = {\n    cardNameArray: [\"beth\", \"birdperson\", \"evilmorty\", \"gianthead\", \"goldenford\",\n      \"jerry\", \"jessica\", \"meeseeks\", \"morty\", \"mr\", \"rick\", \"summer\"],\n    score: 0,\n    topScore: 0,\n    selected: [],\n    message: \"Click an image to begin!\"\n  }\n\n  cardClick = (e) => {\n    console.log(e.target.name);\n    if (this.state.selected.includes(e.target.name)) {\n      // restart game\n      this.setState({ score: 0, selected: [], message: \"You have clicked this already, try again!\" })\n    } else {\n      // increment score\n      this.incrementScore();\n      this.storeSelected(e);\n    }\n    // reshuffle pictures\n    this.setState({\n      cardNameArray: this.state.cardNameArray.sort(\n        () => { return (Math.random() * 2 - 1) }\n      )\n    })\n  }\n  incrementScore = () => {\n    if (this.state.topScore <= this.state.score) {\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n    this.setState({ score: this.state.score + 1, message: \"You got this one right!\" });\n\n  }\n  storeSelected = (e) => {\n    const newArray = this.state.selected\n    newArray.push(e.target.name)\n    this.setState({ selected: newArray })\n  }\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} message={this.state.message} />\n        <Jumbotron />\n        <Body cardNameArray={this.state.cardNameArray} cardClick={this.cardClick} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}